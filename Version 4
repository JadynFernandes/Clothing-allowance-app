#Importing necessary modules to use a Gui interface
from tkinter import *
from tkinter import ttk
import random
#Creating the different accounts for the children

class Account:
    def __init__(self, name, balance, bonus):
        self.name = name
        self.balance = float(balance)
        self.bonus = bonus
        account_list.append(self)
    
    def withdraw(self, amount):
        try:
            amount=float(amount)
            check= isinstance( amount, float )
            if check == True:
                if amount <= self.balance:
                    if amount > 0:
                        self.balance -= amount
                        return True
                    else:
                        action_feedback.set("Withdrawal amount can't be negative")
                        return False
                else:
                    action_feedback.set("Not enough money in account")
                    return False 
        except ValueError:
            action_feedback.set("Please enter a number")
            return False
#Creating list of names for each of the children

def create_name_list():
    name_list = []
    for account in account_list:
        name_list.append(account.name)
    return name_list
#Updating the balance/bonus of the children in the gui and the file 

def update_balance():
    balance_string = ""
    account_file = open("allowance.txt", "w")
    for account in account_list:
        balance_string += "{}'s Allowance: ${:.2f} - Bonus: {}\n".format(account.name, account.balance, account.bonus)
        account_details.set(balance_string)
        account_file.write("{},{},{}\n".format(account.name, account.balance, account.bonus))           

def withdraw_money(account):
    if account.withdraw(amount.get()):
        message = random.choice(withdraw_messages)
        message_text.set(message)
        action_feedback.set("Success! Total of ${:.2f} withdrawn from {}".format(amount.get(), account.name))
    
#Choose which child's account balance is withdrawn from

def choose_account():
    try:
        amount = DoubleVar()
        for account in account_list:
            if chosen_account.get() == account.name:
                withdraw_money(account)
                update_balance()
                amount.set("")

    # Add an exception for text input
    except ValueError:
        action_feedback.set("Please enter a valid number")
        print("daneil")
#Choosing which account to check the bonus for

def bonus_check1():
    try:
        for account in account_list:
            if chosen_account.get() == account.name:
                bonus_check2(account)
    except:
        pass
#Checking if account is eligible for bonus

def bonus_check2(account):
    if account.balance > 50:
        Bonus_window()
        update_balance()
    else:
        action_feedback.set("Less than $50 in {}'s account so it is ineligible for bonus".format(account.name))
#Creating lists for the program

withdraw_messages = ["Watch your spending!", "Make sure you have enough money for your clothes", "If you have more than $50 at the end of the year then you are eligible for a bonus"]
account_list=[]

#Assigning the data in the file to different information for each child
account_file = open("allowance.txt","r")
line_list = account_file.readlines()
for line in line_list:
    account_data = line.strip().split(",")
    Account(*account_data)
    f_name=(account_data[0])
    f_balance=(account_data[1])
    f_bonus=(account_data[2])
account_names = create_name_list()
#Function to allocate a bonus to a specific child

def get_bonus(activity):
    for account in account_list:
        if chosen_account.get() == account.name:    
            if len(activity.get()) < 2:
                print(activity.get())
                action_feedback.set("Success! The bonus activity {} is alocated to {}".format(activity.get(), account.name))
                account.bonus=activity.get()
                update_balance()
        
            else:
                activity_feedback.set("Please make the activity at least 3 characters or more.")
###Gui###
#Create main window
root = Tk()
root.title("Clothing Allowance")
frame1 = ttk.Frame(root)
frame1.grid(row=0, column=0)

#Create title
title_label = ttk.Label(frame1, text="Clothing Allowance App")
title_label.grid(row=0, column=0, padx=10, pady=5)
top_frame = ttk.LabelFrame(root, text="Details")
top_frame.grid(row=0, column=0, padx=10, pady=10, sticky="NSEW")

#Creating and setting the message label variable
message_text = StringVar()
message_text.set("Welcome! You can withdraw allowance money or check your eligiblity for a bonus and set it.")
message_label = ttk.Label(top_frame, textvariable=message_text, wraplength=250)
message_label.grid(row=0, column=0, columnspan=2, padx=10, pady=10)

#Creating bottom frame
bottom_frame = ttk.LabelFrame(root)
bottom_frame.grid(row=1, column=0, padx=10, pady=10, sticky="NSEW")

#Labelling account
account_label = ttk.Label(bottom_frame, text="Child: ")
account_label.grid(row=3, column=0, padx=10, pady=3)
chosen_account = StringVar()
chosen_account.set(account_names[0])

#Creating checkbox for different children
account_box = ttk.Combobox(bottom_frame, textvariable=chosen_account, state="readonly")
account_box['values'] = account_names
account_box.grid(row=3, column=1, padx=10, pady=3, sticky="WE")
account_details = StringVar()
details_label = ttk.Label(top_frame, textvariable=account_details)
details_label.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

#Label for the amount field 
amount_label = ttk.Label(bottom_frame, text="Withdrawal Amount:")
amount_label.grid(row=5, column=0, padx=10, pady=3)

#Creating an entry to type in amount
amount=StringVar()
amount.set(" ")
amount_entry = ttk.Entry(bottom_frame, textvariable=amount)
amount_entry.grid(row=5, column=1, padx=10, pady=3, sticky="WE")

#Create a submit button
submit_button = ttk.Button(bottom_frame, text="Withdraw", command=choose_account)
submit_button.grid(row=6, column=0, columnspan=2, padx=10, pady=10)

#Creating a bonus calculate button
bonus_button = ttk.Button(bottom_frame, text="Check Bonus", command=bonus_check1)
bonus_button.grid(row=7, column=0, columnspan=2, padx=10, pady=10)

#action feedback label
action_feedback = StringVar()
action_feedback_label = ttk.Label(bottom_frame, textvariable=action_feedback)
action_feedback_label.grid(row=8, column=0, columnspan=2)

#Creating a new window to enter the child's bonus
def Bonus_window():
    
    #Creating the new window
    background = "light blue"
    bonus_box = Toplevel()
    bonus_frame = Frame(bonus_box, width=400, height=300, bg=background)
    bonus_frame.grid()
    
    #Creating a title for the window
    Bonus_title = Label(bonus_frame, text="Congrats! Enter the activity you want as a bonus.",font="arial 10 bold", bg=background)
    Bonus_title.grid(row=0)
    bonus_text = Label(bonus_frame, text="Activity:", bg=background,)
    bonus_text.grid(row=1, column=0)
    
    #Creating an entry to type in activity
    activity = StringVar()
    activity.set(" ")
    activity_entry = ttk.Entry(bonus_frame, textvariable=activity)
    activity_entry.grid(row=1, column=1, padx=10, pady=3)        
    
    #Creating a submit button 
    submit_bonus = ttk.Button(bonus_frame, text="Submit", command=lambda:get_bonus(activity))
    submit_bonus.grid(row=2, column=0, columnspan=2, padx=10, pady=10)    
    
    #Creating a label to give feedback on an input
    activity_feedback = StringVar()
    activity_feedback_label = ttk.Label(bonus_frame, textvariable=activity_feedback)
    activity_feedback_label.grid(row=2, column=1, )    
    
    #Creating an exit button
    dismiss_button = Button(bonus_frame, text="Dismiss", width=10, bg="orange",font="arial 10 bold", command=bonus_box.destroy)
    dismiss_button.grid(row=3, pady=10)

#Running the program and the update balance function
if __name__ == "__main__":
    update_balance()
    root.mainloop() 
