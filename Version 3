from tkinter import *
from tkinter import ttk
import random

#Account class creation


class Account:
    def __init__(self, name, balance, bonus):
        self.name = name
        self.balance = float(balance)
        self.bonus = bonus
        account_list.append(self)
        
    def withdraw(self, amount):
        if amount > 0 and amount <= self.balance:
            self.balance -= amount
            return True
        else:
            return False    



def get_data():
    account_file = open("allowance.txt","r")
    line_list = account_file.readlines()

    for line in line_list:
        account_data = line.strip().split(",")
        Account(*account_data)
        f_name=(account_data[0])
        f_balance=(account_data[1])
        f_bonus=(account_data[2])
        
def create_name_list():
    name_list = []
    for account in account_list:
        name_list.append(account.name)
    return name_list

def update_balance():
    balance_string = ""
    account_file = open("allowance.txt", "w")
    
    for account in account_list:
        balance_string += "{}'s Allowance: ${:.2f} - Bonus: {}\n".format(account.name, account.balance, account.bonus)
        
        
        account_details.set(balance_string)
        account_file.write("{},{},{}\n".format(account.name, account.balance, account.bonus))           
    
    

def withdraw_money(account):
    if account.withdraw(amount.get()):
        message = random.choice(withdraw_messages)
        message_text.set(message)
        action_feedback.set("Success! Total of ${:.2f} withdrawn from {}".format(amount.get(), account.name))
    else:
        action_feedback.set("Not enough money in {} or not a valid amount".format(account.name))

#choose which accounts balance is changed

def choose_account():
    try:
        for account in account_list:
            if chosen_account.get() == account.name:
                withdraw_money(account)

        # Update the GUI
        update_balance()
        amount.set("")

    # Add an exception for text input
    except ValueError:
        action_feedback.set("Please enter a valid number")    
    
    

def check_bonus():
    print("John")


withdraw_messages = ["Watch your spending!", "Make sure you have enough money for your clothes", "If you have more than $50 at the end of the year then you are eligible for a bonus"]

account_list=[]



account_file = open("allowance.txt","r")
line_list = account_file.readlines()

for line in line_list:
    account_data = line.strip().split(",")
    Account(*account_data)
    f_name=(account_data[0])
    f_balance=(account_data[1])
    f_bonus=(account_data[2])





f_name=(account_data[0])
f_balance=(account_data[1])
f_bonus=(account_data[2])




nikau = Account(f_name, f_balance , f_bonus)
hana = Account(f_name, f_balance, f_bonus)
tia = Account(f_name, f_balance, f_bonus)
account_names = create_name_list()



###Gui



root = Tk()
root.title("Clothing Allowance")

frame1 = ttk.Frame(root)
frame1.grid(row=0, column=0)

title_label = ttk.Label(frame1, text="Clothing Allowance App")
title_label.grid(row=0, column=0, padx=10, pady=5)

top_frame = ttk.LabelFrame(root, text="Details")
top_frame.grid(row=0, column=0, padx=10, pady=10, sticky="NSEW")

message_text = StringVar()
message_text.set("Welcome! You can withdraw allowance money or check your eligiblity for a bonus and set it.")

message_label = ttk.Label(top_frame, textvariable=message_text, wraplength=250)
message_label.grid(row=0, column=0, columnspan=2, padx=10, pady=10)


bottom_frame = ttk.LabelFrame(root)
bottom_frame.grid(row=1, column=0, padx=10, pady=10, sticky="NSEW")

account_label = ttk.Label(bottom_frame, text="Child: ")
account_label.grid(row=3, column=0, padx=10, pady=3)


chosen_account = StringVar()
chosen_account.set(account_names[0])

account_box = ttk.Combobox(bottom_frame, textvariable=chosen_account, state="readonly")
account_box['values'] = account_names
account_box.grid(row=3, column=1, padx=10, pady=3, sticky="WE")


account_details = StringVar()

details_label = ttk.Label(top_frame, textvariable=account_details)
details_label.grid(row=2, column=0, columnspan=2, padx=10, pady=10)


# Create a label for the amount field and pack it into the GUI
amount_label = ttk.Label(bottom_frame, text="Withdrawal Amount:")
amount_label.grid(row=5, column=0, padx=10, pady=3)

# Create a variable to store the amount
amount = DoubleVar()
amount.set(" ")

# Create an entry to type in amount
amount_entry = ttk.Entry(bottom_frame, textvariable=amount)
amount_entry.grid(row=5, column=1, padx=10, pady=3, sticky="WE")

# Create a submit button
submit_button = ttk.Button(bottom_frame, text="Submit", command=choose_account)
submit_button.grid(row=6, column=0, columnspan=2, padx=10, pady=10)

#bonus calculate button
bonus_button = ttk.Button(bottom_frame, text="Check Bonus", command=check_bonus)
bonus_button.grid(row=7, column=0, columnspan=2, padx=10, pady=10)

# Create an action feedback label
action_feedback = StringVar()
action_feedback_label = ttk.Label(bottom_frame, textvariable=action_feedback)
action_feedback_label.grid(row=8, column=0, columnspan=2)



if __name__ == "__main__":
    update_balance()
    root.mainloop() 
