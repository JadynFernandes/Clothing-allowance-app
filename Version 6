# You must have the "allowance" text file to use this program.

# Importing the necessary modules to use a Gui interface in the program.
##Functions###
from tkinter import *
from tkinter import ttk
import random
'''Creating the class that assigns values for the different accounts for each of the children.'''

class Account:
    '''
    Creating the Account class that assigns and stores the account balance 
    and bonus values for the different accounts for each of the children.
    It also has the withdraw method for checking if money can be withdrawn
    from an account, and then performing the withdrawal if correct.
    '''    
    def __init__(self, name, balance, bonus):  
        self.name = name
        self.balance = float(balance)
        self.bonus = bonus
        account_list.append(self)


    def withdraw(self, amount):
        '''
        Creating the withdraw method to check if the amount is valid, 
        and then subtracting money from the account balance.
        '''
        try:
            amount=float(amount)
            check= isinstance(amount, float)  # Checks if the amount is a float value.
            if check == True:
                if amount <= self.balance:  # Checks if the amount withdrawn is less than the amount in the account.
                    if amount > 0:  # Checks if the amount is greater than 0.
                        self.balance -= amount  # Subtracts the amount from the balance of the child.
                        action_feedback.set("Success! Total of ${:.2f} withdrawn from {}".format(amount, self.name))
                        return True
                    else:
                        action_feedback.set("Withdrawal amount can't be 0 or less")
                        return False
                else:
                    action_feedback.set("Not enough money in account")
        except ValueError:
            action_feedback.set("Enter only numbers")  
            return False  
        
        
def create_name_list():
    '''
    Creating a list of names for the children's accounts.
    '''
    name_list = []
    for account in account_list:
        name_list.append(account.name)
    return name_list
 

def update_balance():
    '''
    Updating the balance/bonus of the children's accounts in the gui and the file.
    '''
    balance_string = ""
    account_file = open("allowance.txt", "w")
    for account in account_list:
        # Formatting the different account values so that they can be displayed properly.
        balance_string += "{}'s Allowance: ${:.2f} - Bonus: {}\n".format(account.name, account.balance, account.bonus)  
        account_details.set(balance_string)
        # Writing the altered account data into the allowance file.
        account_file.write("{},{},{}\n".format(account.name, account.balance, account.bonus))  
        

def withdraw_money(account):
    '''
    This function changes the action_feedback message in the gui to show the account change to the user.
    It also updates the balance of the children's accounts.
    '''
    if account.withdraw(amount.get()):
        update_balance()
        message = random.choice(withdraw_messages)
        message_text.set(message)
        # Showing a message that displays how much money is withdrawn from which account.
        action_feedback.set("Success! Total of ${:.2f} withdrawn from {}".format(amount.get(), account.name))  

def choose_account():
    '''
    Function to choose which child's account balance is withdrawn from 
    and setting the amount to a DoubleVar so it can be manipulated properly.
    '''
    try:
        for account in account_list:
            if chosen_account.get() == account.name:
                amount=DoubleVar()
                withdraw_money(account)  # Withdrawing money with the account parameter.
                amount.set("")  
    except ValueError:
        pass


def bonus_check1():
    '''
    Function to choose which account wants to receive a bonus.
    '''
    for account in account_list:
        if chosen_account.get() == account.name:  # Searches for the account within the accounts that are present.
            bonus_check2(account)


def bonus_check2(account):
    '''
    Function that checks if the account is eligible to receive the bonus
    and open the bonus window to choose an activity.
    '''
    if account.balance > 50:  # Checks if there is at least $50 in the account balance.  
        Bonus_window()
        update_balance()  # Updates the credentials of all accounts so that new bonus is registered.
    else:
        action_feedback.set("Less than $50 in {}'s account so it is ineligible for bonus".format(account.name))


def get_bonus(activity):
    '''
    Function to check if the activity input is valid 
    and then changing the bonus to the input if it is.
    '''
    for account in account_list:
        if chosen_account.get() == account.name:    
            activity=activity.get()
            letters=activity.isalpha()  # Checks if the activity has only letters in the string.
            if letters==True:                    
                if len(activity) > 2:  # Checks if the activity is longer than 2 characters.
                    action_feedback.set("Success! The bonus activity {} is alocated to {}".format(activity, account.name))
                    activity_feedback.set("Submission successful")
                    account.bonus=activity  # Sets the activity input as the new account bonus.
                    update_balance()
                    return True
                else:
                    activity_feedback.set("Please make the bonus longer than two characters")
                    return False
            else:
                activity_feedback.set("Please make the bonus only letters")
                return False  


def reset():
    '''
    Resets the bonus and balance of each account.
    '''
    for account in account_list:
        account.bonus="not chosen"
        account.balance=300.00
        action_feedback.set("")  # Removes the action_feedback message that is displayed.
    update_balance()


# Creating the withdraw list for random withdraw messages and the account list for the children's accounts.
withdraw_messages = ["Watch your spending!", "Make sure you have enough money for your clothes", "If you have more than $50 at the end of the year then you are eligible for a bonus"]
account_list=[]

# Opening, reading and assigning the data in the allowance file to different information types for each child.
account_file = open("allowance.txt","r")
line_list = account_file.readlines()
for line in line_list:
    account_data = line.strip().split(",")
    Account(*account_data)
    f_name=(account_data[0])
    f_balance=(account_data[1])
    f_bonus=(account_data[2])
account_names = create_name_list()


###Gui###
# Creating the main window.
root = Tk()
root.title("Clothing Allowance")
frame1 = ttk.Frame(root)
frame1.grid(row=0, column=0)

# Creating the title.
title_label = ttk.Label(frame1, text="Clothing Allowance App")
title_label.grid(row=0, column=0, padx=10, pady=5)
top_frame = ttk.LabelFrame(root, text="Details")
top_frame.grid(row=0, column=0, padx=10, pady=10, sticky="NSEW")

# Creating and setting the message label variable.
message_text = StringVar()
message_text.set("Welcome! You can withdraw allowance money or check your eligiblity for a bonus and set it.")
message_label = ttk.Label(top_frame, textvariable=message_text, wraplength=250)
message_label.grid(row=0, column=0, columnspan=2, padx=10, pady=10)

# Creating a bottom frame.
bottom_frame = ttk.LabelFrame(root)
bottom_frame.grid(row=1, column=0, padx=10, pady=10, sticky="NSEW")

# Labelling the accounts for the children.
account_label = ttk.Label(bottom_frame, text="Child: ")
account_label.grid(row=3, column=0, padx=10, pady=3)
chosen_account = StringVar()
chosen_account.set(account_names[0])

# Creating a checkbox for different children.
account_box = ttk.Combobox(bottom_frame, textvariable=chosen_account, state="readonly")
account_box['values'] = account_names
account_box.grid(row=3, column=1, padx=10, pady=3, sticky="WE")
account_details = StringVar()
details_label = ttk.Label(top_frame, textvariable=account_details)
details_label.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

# Label for the amount field.
amount_label = ttk.Label(bottom_frame, text="Withdrawal Amount:")
amount_label.grid(row=5, column=0, padx=10, pady=3)

# Creating an entry to type in amount.
amount=StringVar()
amount.set(" ")
amount_entry = ttk.Entry(bottom_frame, textvariable=amount)
amount_entry.grid(row=5, column=1, padx=10, pady=3, sticky="WE")

# Creating a submit button.
submit_button = ttk.Button(bottom_frame, text="Withdraw", command=choose_account)
submit_button.grid(row=6, column=0, columnspan=2, padx=10, pady=10)

# Creating a bonus calculate button.
bonus_button = ttk.Button(bottom_frame, text="Bonus", command=bonus_check1)
bonus_button.grid(row=7, column=0, columnspan=2, padx=5, pady=10)

# Creating an action feedback label.
action_feedback = StringVar()
action_feedback_label = ttk.Label(bottom_frame, textvariable=action_feedback)
action_feedback_label.grid(row=8, column=0, columnspan=2)

# Creating a reset button.
reset_button = ttk.Button(bottom_frame, text="Reset", command=reset)
reset_button.grid(row=7, column=0,  padx=10, pady=10)

# Creating a button to close the program
close_button = ttk.Button(bottom_frame, text="Close", command=root.destroy)
close_button.grid(row=7, column=1,  padx=10, pady=10)

activity_feedback = StringVar()


def Bonus_window():
    '''
    Creating a new window to enter the child's bonus activty.
    '''
    # Creating the new window.
    background = "light blue"
    bonus_box = Toplevel()
    bonus_frame = Frame(bonus_box, width=400, height=300, bg=background)
    bonus_frame.grid()
    
    # Creating a title for the window.
    Bonus_title = Label(bonus_frame, text="Congrats! Enter the activity you want as a bonus.",font="arial 10 bold", bg=background)
    Bonus_title.grid(row=0)
    
    # Creating an entry to type in activity they want to choose.
    activity = StringVar()
    activity_entry = ttk.Entry(bonus_frame, textvariable=activity)
    activity_entry.grid(row=1, column=0, padx=10, pady=3)        
    
    # Creating a submit button. 
    submit_bonus = ttk.Button(bonus_frame, text="Submit", command=lambda:get_bonus(activity))
    submit_bonus.grid(row=2, column=0, columnspan=2, padx=10, pady=10)    
    
    # Creating a label to give feedback on an input.
    activity_feedback.set("Please enter your bonus in letters")
    activity_feedback_label = ttk.Label(bonus_frame, textvariable=activity_feedback)
    activity_feedback_label.grid(row=3, column=0, padx=10, pady=8 )    
    
    # Creating an exit button.
    dismiss_button = Button(bonus_frame, text="Dismiss", width=10, bg="orange",font="arial 10 bold", command=bonus_box.destroy)
    dismiss_button.grid(row=4, pady=10)


# Running the program gui and the update balance function.
if __name__ == "__main__":
    update_balance()
    root.mainloop() 
